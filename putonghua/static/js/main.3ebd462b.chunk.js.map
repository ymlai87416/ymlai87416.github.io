{"version":3,"sources":["Components/PinyinGrid.js","Components/PinyinTable.js","App.js","serviceWorker.js","index.js"],"names":["PinyinGrid","props","state","consonant","vowel","content","rowStyle","marginLeft","marginRight","colStyle","paddingRight","paddingLeft","pinyin","this","w1","w2","w3","w4","isEmpty","l1","find","element","l2","l3","l4","className","style","nextProps","prevState","React","Component","PinyinTable","consonantList","vowelList","listUrl","errorMessage","readList","url","fetch","then","response","ok","text","Error","data","myObject","JSON","parse","setState","bind","catch","err","message","line","console","log","header","renderHeader","rows","map","i","renderRow","minWidth","object","key","rowNumber","keyStart","length","renderGrid","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ebd462b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//a grid that show character based \r\nclass PinyinGrid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            consonant: props.consonant,\r\n            vowel: props.vowel,\r\n            content: props.content\r\n        };\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        return {content : nextProps.content};\r\n    }\r\n\r\n    render() {\r\n        const rowStyle = {\r\n            marginLeft: '0px',\r\n            marginRight: '0px'\r\n        }\r\n    \r\n        const colStyle = {\r\n            paddingRight: '0px',\r\n            paddingLeft: '0px'\r\n        }\r\n        \r\n        var pinyin = this.state.consonant + this.state.vowel\r\n        var w1 = '_',  w2 = '_', w3 = '_', w4 = '_'\r\n        var isEmpty = true\r\n        var l1 = this.state.content.find(element => element[\"pinyin2\"] === pinyin+\"1\")\r\n        if (l1) {w1 = l1[\"list\"][0]; isEmpty = false;}\r\n        var l2 = this.state.content.find(element => element[\"pinyin2\"] === pinyin+\"2\")\r\n        if (l2) {w2 = l2[\"list\"][0]; isEmpty = false;}\r\n        var l3 = this.state.content.find(element => element[\"pinyin2\"] === pinyin+\"3\")\r\n        if (l3) {w3 = l3[\"list\"][0]; isEmpty = false;}\r\n        var l4 = this.state.content.find(element => element[\"pinyin2\"] === pinyin+\"4\")\r\n        if (l4) {w4 = l4[\"list\"][0]; isEmpty = false;}\r\n\r\n        if(isEmpty)\r\n            w1=w2=w3=w4=''\r\n\r\n        return (\r\n            <div className=\"col border\" style={colStyle} >\r\n                <div className=\"row\" style={rowStyle}>\r\n                    <div className=\"col mini-box\" style={colStyle}>{w1}</div>\r\n                    <div className=\"col mini-box\" style={colStyle}>{w2}</div>\r\n                </div>\r\n                <div className=\"row\" style={rowStyle}>\r\n                    <div className=\"col mini-box\" style={colStyle}>{w3}</div>\r\n                    <div className=\"col mini-box\" style={colStyle}>{w4}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PinyinGrid;","import React from 'react';\r\nimport PinyinGrid from './PinyinGrid.js';\r\n\r\n//a grid that show character based \r\nclass PinyinTable extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.consonantList = [\"b\", \"p\", \"m\", \"f\", \"d\", \"t\", \"n\", \"l\", \"g\", \"k\", \"h\", \"j\", \r\n            \"q\", \"x\", \"zh\", \"ch\", \"sh\", \"r\", \"z\", \"c\", \"s\", \"\"];\r\n        this.vowelList = [\"a\", \"o\", \"e\", \"ê\", \"ai\", \"ei\", \"ao\", \"ou\", \"an\", \"en\", \"ang\", \"eng\", \"er\", \r\n            \"i\", \"ia\", \"ie\", \"iao\", \"iu\", \"ian\", \"in\", \"iang\", \"ing\", \"u\", \"ua\", \"uo\", \"uai\", \"ui\", \"uan\", \r\n            \"un\", \"uang\", \"ueng\", \"ong\", \"ü\", \"üe\", \"üan\", \"ün\", \"iong\"];\r\n        this.listUrl = \"https://ymlai87416.github.io/res/pinyin_word.json\";\r\n        this.state = {\r\n            errorMessage: \"\",\r\n            content: []\r\n        };\r\n    }\r\n    \r\n    componentWillMount() {\r\n        this.readList();\r\n    }\r\n\r\n    readList(){\r\n        //read the list in following format\r\n        //read the pinyin, find a vowel with accent, and convert it back to number\r\n        var url = this.listUrl;\r\n        fetch(url)\r\n            .then(function (response) {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                throw new Error('Error message.');\r\n            })\r\n            .then(function (data) {\r\n                var myObject = JSON.parse(data);\r\n                //debugger\r\n                this.setState({ content: myObject });\r\n            }.bind(this))\r\n            .catch(function (err) {\r\n                this.setState({ content: [], errorMessage: \"failed to load \" + url + \" \" + err.message + err.line });\r\n                console.log(this.state.errorMessage);\r\n            }.bind(this));\r\n    }\r\n\r\n    render() {\r\n        const style={\r\n            minWidth:'1500px'\r\n        }\r\n        var header = this.renderHeader();\r\n        var rows = this.consonantList.map((consonant, i) => this.renderRow(consonant, i));\r\n\r\n        return (\r\n            <div className=\"container-fluid\" style={style}>\r\n                {header}\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderHeader(){\r\n        const colStyle = {\r\n            paddingRight: '0px',\r\n            paddingLeft: '0px'\r\n        }\r\n        return(\r\n            <div className=\"row\"> \r\n                <div className=\"col\" style={colStyle}>&nbsp;</div> \r\n                {this.vowelList.map((object, i) => <div className=\"col\" key={i}  style={colStyle}>{object}</div>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderRow(consonant, rowNumber){\r\n        const colStyle = {\r\n            paddingRight: '0px',\r\n            paddingLeft: '0px'\r\n        }\r\n\r\n        var keyStart = rowNumber * this.vowelList.length\r\n        return(\r\n            <div className=\"row\"> \r\n                <div className=\"col border\" style={colStyle}><b>{consonant}</b></div> \r\n                {\r\n                    this.vowelList.map((object, i) =>  this.renderGrid(consonant, object, keyStart+i))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderGrid(consonant, vowel , key){\r\n        return(\r\n            <PinyinGrid consonant={consonant} vowel={vowel} key={key} content={this.state.content} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default PinyinTable;","import React from 'react';\nimport './App.css';\nimport PinyinTable from './Components/PinyinTable.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PinyinTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}