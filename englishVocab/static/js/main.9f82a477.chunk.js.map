{"version":3,"sources":["logo.svg","Components/Result.js","Components/WordList.js","Components/Ielts4000.js","Components/Ielts7000.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Result","props","state","word","relatedWords","this","className","map","line","idx","key","React","Component","WordList","_handleKeyDown","evt","target","value","matchedEntry","content","find","item","index","array","setState","distanceUrl","wordUrl","localStorageName","headerText","errorMessage","url","fetch","then","response","ok","text","Error","data","parsedData","split","record","length","bind","catch","err","message","console","log","Storage","loadWordList","type","placeholder","onKeyDown","href","Ielts4000","Ielts7000","App","tabChoiced","id","currentIndex","tabs","tabName","_this","isBox1Show","isBox2Show","tabList","res","tabStyle","onClick","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f82a477.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass Result extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {};\r\n    }\r\n  \r\n    render() {\r\n        var word = \"\"\r\n        var relatedWords = []\r\n\r\n        if(this.props.word){\r\n            word = this.props.word.word;\r\n            relatedWords = this.props.word.relatedWords;\r\n\r\n            return (\r\n                <div >\r\n                    <h3 className=\"text-left\">{word}</h3> \r\n                    <ul className=\"text-left\">\r\n                    {\r\n                        relatedWords.map((line, idx) =>\r\n                            <li key={idx}>{line}</li>)\r\n                    }\r\n                    </ul>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            word = \"\";\r\n            relatedWords = [];\r\n\r\n            return(\r\n                <div>\r\n                    <p>^_^</p> \r\n                </div>\r\n            )\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport Result from './Result.js'\r\n\r\nclass WordList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.distanceUrl = null;\r\n        this.wordUrl = null;\r\n        this.localStorageName = null; \r\n        this.headerText = null;\r\n        this.state = {\r\n            errorMessage: \"\",\r\n            content: [],\r\n            word: null\r\n        };\r\n    }\r\n\r\n    loadWordList() {\r\n        var url = this.distanceUrl;\r\n        fetch(url)\r\n            .then(function (response) {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                throw new Error('Error message.');\r\n            })\r\n            .then(function (data) {\r\n                //console.log(\"data: \", data);\r\n                var lines = data.split(\"\\n\");\r\n                var parsedData = lines.map(line => {\r\n                    var record = line.split(':')\r\n                    var word = record[0]\r\n                    var relatedWords = []\r\n                    if (record.length > 1) {\r\n                        relatedWords = record[1].split(\",\")\r\n                    }\r\n\r\n                    return {\r\n                        word: word,\r\n                        relatedWords: relatedWords\r\n                    }\r\n                });\r\n\r\n                this.setState({ content: parsedData });\r\n            }.bind(this))\r\n            .catch(function (err) {\r\n                this.setState({ content: [], errorMessage: \"failed to load \" + url + \" \" + err.message + err.line });\r\n                console.log(this.state.errorMessage);\r\n            }.bind(this));\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof (Storage) !== \"undefined\") {\r\n            this.loadWordList();\r\n        } else {\r\n            this.setState({ errorMessage: \"Sorry, your browser does not support web storage...\" });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>{this.headerText}</h2> \r\n                <div className=\"input-group input-group-sm mb-3\">\r\n                    <input className=\"form-control\" type=\"text\" placeholder=\"Enter your word here.\" onKeyDown={this._handleKeyDown}></input>\r\n                </div>\r\n                <Result word={this.state.word}></Result>\r\n                <p>{this.state.errorMessage}</p>\r\n\r\n                <br/>\r\n                <br/>\r\n                <div className=\"text-right\">\r\n                    <p>Related resources: </p> \r\n                    <a href={this.wordUrl} >Word list</a>\r\n                    <br />\r\n                    <a href={this.distanceUrl} >Similar words</a>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    _handleKeyDown = (evt) => {\r\n        if (evt.key === 'Enter') {\r\n            var word = evt.target.value;\r\n            evt.target.value = \"\";\r\n            var matchedEntry = this.state.content.find(function(item, index, array){\r\n                return item.word == word;\r\n              });\r\n\r\n            if(matchedEntry)\r\n                this.setState({word: matchedEntry})\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default WordList;","import React from 'react';\r\nimport WordList from './WordList.js'\r\n\r\nclass Ielts4000 extends WordList {\r\n    constructor(props) {\r\n        super(props);\r\n        this.distanceUrl = \"https://ymlai87416.github.io/res/nearest-4000.txt\"\r\n        this.wordUrl = \"https://ymlai87416.github.io/res/ietls-4000.txt\"\r\n        this.localStorageName = \"ielts4000\"; \r\n        this.headerText = \"IELTS 4000 word list\";\r\n    }\r\n}\r\n\r\n\r\nexport default Ielts4000;","import React from 'react';\r\nimport WordList from './WordList.js'\r\n\r\nclass Ielts7000 extends WordList {\r\n    constructor(props) {\r\n        super(props);\r\n        this.distanceUrl = \"https://ymlai87416.github.io/res/nearest-7000.txt\"\r\n        this.wordUrl = \"https://ymlai87416.github.io/res/ietls-7000.txt\"\r\n        this.localStorageName = \"ielts7000\"; \r\n        this.headerText = \"IELTS 7000 word list\";\r\n    }\r\n}\r\n\r\n\r\nexport default Ielts7000;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Ielts4000 from './Components/Ielts4000.js';\nimport Ielts7000 from './Components/Ielts7000.js';\n\n/*\n  load 2 cache file, and then search the file every search\n\n*/\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabs: [\n        { tabName: \"IELTS 4000\", id: 1 },\n        { tabName: \"IELTS 7000\", id: 2 },\n      ],\n      currentIndex: 1,\n    };\n  }\n\n  tabChoiced=(id)=>{\n    // tab切换的方法\n    this.setState({\n        currentIndex:id\n    });\n}\n\n  render() {\n\n    var _this = this;\n    var isBox1Show = this.state.currentIndex == 1 ? 'block' : 'none';\n    var isBox2Show = this.state.currentIndex == 2 ? 'block' : 'none';\n\n    var tabList = this.state.tabs.map(function (res, index) {\n      // 遍历标签页，如果标签的id等于tabid，那么该标签就加多一个active的className\n      var tabStyle = res.id == this.state.currentIndex ? 'nav-link active' : 'nav-link';\n\n      return (\n        <li  className=\"nav-item\">\n          <a className={tabStyle} href=\"#\" key={index} onClick={this.tabChoiced.bind(_this, res.id)}>{res.tabName}</a> \n        </li>\n      )\n\n    }.bind(_this));\n\n    return (\n      <div className=\"App\">\n        <ul className=\"nav \">\n          {tabList}\n        </ul>\n        <div className=\"appList\">\n          <div style={{ \"display\": isBox1Show }} >\n            <Ielts4000></Ielts4000>\n          </div>\n          <div style={{ \"display\": isBox2Show }}>\n            <Ielts7000></Ielts7000>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}