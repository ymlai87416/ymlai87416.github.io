<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cheatsheets on Tom personal site</title><link>https://ymlai87416.github.io/cheatsheet/</link><description>Recent content in Cheatsheets on Tom personal site</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</managingEditor><webMaster>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ymlai87416.github.io/cheatsheet/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary</title><link>https://ymlai87416.github.io/cheatsheet/algorithm/binary/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/binary/</guid><description>Binary Number of bit set 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static int NumberOfSetBits(int i) { i = i - ((i &amp;gt;&amp;gt;&amp;gt; 1) &amp;amp; 0x55555555); i = (i &amp;amp; 0x33333333) + ((i &amp;gt;&amp;gt;&amp;gt; 2) &amp;amp; 0x33333333); return (((i + (i &amp;gt;&amp;gt;&amp;gt; 4)) &amp;amp; 0x0F0F0F0F) * 0x01010101) &amp;gt;&amp;gt;&amp;gt; 24; } static int NumberOfSetBits(int i){ int cnt = 0; while(i != 0){ i = i &amp;amp; (i - 1); //equivalent to i -= (i &amp;amp; -i); ++cnt; } return cnt; } Refer: UVA10496</description></item><item><title>Data structures</title><link>https://ymlai87416.github.io/cheatsheet/algorithm/data_structure/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/data_structure/</guid><description>Data structure Union find Shortcut: ds.uf
Time complexity: O(Î±(n))
Memory complexity: O(n)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class UnionFind { // OOP style int[] p; int[] rank; int[] size; UnionFind(int N) { p = new int[N]; rank = new int[N]; size = new int[N]; for (int i = 0; i &amp;lt; N; i++) p[i] = i; } void init(){ for (int i = 0; i &amp;lt; p.</description></item><item><title>Dynamic programming</title><link>https://ymlai87416.github.io/cheatsheet/algorithm/dp/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/dp/</guid><description>Dynamic programming Longest increasing subsequence Very classic algorithm. Time complexity: O(nlog(n)) Space complexity: O(n)
Refer: Longest Increasing Subsequence
Travelling salesman Shortcut: dp.tsp
Time complexity: from O(2!) =&amp;gt; O(2^n) Space complexity: O(2^n)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 //this version use adj matrix //please change to use adj list static =11 static boolean[][] vis = new boolean[11][1 &amp;lt;&amp;lt; MAX_NODE]; int travellingSalesman (int end, int mask) { int bitSet = NumberOfSetBits(mask); if(bitSet == point-1){ if((mask &amp;amp; 1) == 0) //mask left only starting position not set.</description></item><item><title>Graph</title><link>https://ymlai87416.github.io/cheatsheet/algorithm/graph/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/graph/</guid><description>Graph Data structure Adj list Shortcut: graph.adjlist
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Pair implements Comparable&amp;lt;Pair&amp;gt; { int first; int second; public Pair(int first, int second) { this.first = first; this.second = second; } @Override public int compareTo(Pair o) { if (first &amp;lt; o.first) return -1; else if (first &amp;gt; o.</description></item><item><title>Maths</title><link>https://ymlai87416.github.io/cheatsheet/algorithm/math/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/math/</guid><description>Maths Master therom $ T(n) = aT(\frac{n}{b}) + f(n^d) \begin{cases} &amp;amp; \text{ if } a=b^d, T(n)=O(n^d logn)\ &amp;amp; \text{ if } a&amp;lt;b^d, T(n)=O(n^d)\ &amp;amp; \text{ if } a&amp;gt;b^d, T(n)=O(n^{log_{b}a}) \end{cases} $
First case:
binary search: $ a=1, b=2, d=0 =&amp;gt; a=b^d, T(n)=O(n^0 * log(n)) = O(log(n))$
sorting: $ a=2, b=2, d=1 =&amp;gt; a=b^d, T(n)=O(n * log(n))$
Third case:
binary tree traverse: $ a=2, b=2, d=0 =&amp;gt; a&amp;gt;b^d, T(n)=O(n^{log_{2}2}) = O(n) $</description></item><item><title>Server admin</title><link>https://ymlai87416.github.io/cheatsheet/admin/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/admin/</guid><description>Server administration Linux Create user 1 2 3 sudo useradd test sudo mkdir /home/test sudo chown -R test: /home/test Routine server patch 1 2 3 4 sudo apt update sudo apt upgrade #Exclude some packages Setup VM and make it start automatically 1 2 3 ## install virt-manager, it can connect to remote vm server virt-manager virsh autostart vmName MySQL Create user with remote access 1 CREATE USER &amp;#39;myuser&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;mypass&amp;#39;; Create new database and grant admin right to new user 1 2 3 create database DWH; GRANT ALL ON database.</description></item><item><title>Strings</title><link>https://ymlai87416.github.io/cheatsheet/algorithm/string/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/string/</guid><description>String KMP searching Time complexity: O(m+n)
Can use to detect longest parlindrom from the beginning
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 final int MAX_N = 1_000_001; char[] T = new char[MAX_N]; char[] P = new char[MAX_N]; // T = text, P = pattern int[] b = new int[MAX_N]; int n, m; // b = back table, n = length of T, m = length of P void kmpPreprocess() { // call this before calling kmpSearch() int i = 0, j = -1; b[0] = -1; // starting values while (i &amp;lt; m) { // pre-process the pattern string P while (j &amp;gt;= 0 &amp;amp;&amp;amp; P[i] !</description></item><item><title>Dart</title><link>https://ymlai87416.github.io/cheatsheet/dart/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/dart/</guid><description>Dart Basic structure Simple declaration 1 2 3 4 int x = 5; int? x; x ??= 5 //??= only assign when it is null final PI = 3.141592653589793; Declare array 1 2 3 final aListOfInts = &amp;lt;int&amp;gt;[]; final aListOfStrings = [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;]; Dim matrix = New Integer(3, 2) {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {4, 5, 6}} Declare structure Enum 1 2 3 4 5 6 enum Status { none, running, stopped, paused } Control structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import &amp;#39;project/car.</description></item><item><title>Go</title><link>https://ymlai87416.github.io/cheatsheet/golang/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/golang/</guid><description>Go lang Header 1 2 package main import &amp;#34;fmt&amp;#34; Basic structure Simple declaration 1 2 3 4 5 var msg string msg = &amp;#34;Hello&amp;#34; myNum := 5 var myFloatNum float32 := 5.99 const Phi = 1.618 Declare array 1 2 3 4 5 6 7 8 9 10 var cars [5]string cars := [...]string{&amp;#34;Volvo&amp;#34;, &amp;#34;BMW&amp;#34;, &amp;#34;Ford&amp;#34;, &amp;#34;Mazda&amp;#34;} //Fix size slice := []int{2, 3, 4} //dynamic size var threedim [5][10][4]int a = [3][4]int{ {0, 1, 2, 3} , /* initializers for row indexed by 0 */ {4, 5, 6, 7} , /* initializers for row indexed by 1 */ {8, 9, 10, 11} /* initializers for row indexed by 2 */ } System.</description></item><item><title>Java</title><link>https://ymlai87416.github.io/cheatsheet/java/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/java/</guid><description>Java Basic structure Simple declaration 1 2 int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number Declare array 1 2 3 4 String[] cars = new String[4]; String[] cars = {&amp;#34;Volvo&amp;#34;, &amp;#34;BMW&amp;#34;, &amp;#34;Ford&amp;#34;, &amp;#34;Mazda&amp;#34;}; int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} }; System.out.println(cars.length) Declare structure 1 2 3 4 5 6 7 8 9 public class Main { int</description></item><item><title>Javascript</title><link>https://ymlai87416.github.io/cheatsheet/javascript/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/javascript/</guid><description>Javascript Basic structure Simple declaration 1 2 3 var x = 5; const PI = 3.141592653589793; let x = 2; Declare array 1 2 3 var cars = [] var cars = [&amp;#34;Saab&amp;#34;, &amp;#34;Volvo&amp;#34;, &amp;#34;BMW&amp;#34;]; var arr_length = cars.length; Declare structure 1 2 3 4 5 6 7 class Car { constructor(name, year) { this.name = name; this.year = year; } } let myCar1 = new Car(&amp;#34;Ford&amp;#34;, 2014); Enum No</description></item><item><title>K8S</title><link>https://ymlai87416.github.io/cheatsheet/k8s/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/k8s/</guid><description>K8s Basic admin See k8s dashboard
1 2 kubectl proxy ssh -L 8001:localhost:8001 ubuntu@192.168.100.21 Find the token for login k8s console
1 kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=&amp;#34;{.secrets[0].name}&amp;#34;) -o go-template=&amp;#34;{{.data.token | base64decode}}&amp;#34; Cert manager Cert manager automatically renew. https://cert-manager.io/docs/usage/certificate/
Ingress For exporting stuff
Cheatsheet https://kubernetes.io/docs/reference/kubectl/cheatsheet/
Create a new worker node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #Tested on ubuntu 22.</description></item><item><title>Python</title><link>https://ymlai87416.github.io/cheatsheet/python/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/python/</guid><description>Python Basic structure Simple declaration 1 2 3 4 x = 5 y = &amp;#34;John&amp;#34; p1 = MyClass() print(p1.x) Declare array 1 2 cars = [&amp;#34;Ford&amp;#34;, &amp;#34;Volvo&amp;#34;, &amp;#34;BMW&amp;#34;] x = len(cars) Declare structure 1 2 3 4 5 6 7 class Person: def __init__(self, name, age): self.name = name self.age = age def myfunc(self): print(&amp;#34;Hello my name is &amp;#34; + self.name) Lambda 1 x = lambda a, b : a</description></item><item><title/><link>https://ymlai87416.github.io/cheatsheet/algorithm/binary_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ymlai87416@gmail.com (Lai Yiu Ming, Tom)</author><guid>https://ymlai87416.github.io/cheatsheet/algorithm/binary_search/</guid><description>Binary search Finding mid Wrong: mid = (high + low) / 2 Correct: mid = low + (high-low)/2
Consider case where high=-4 and low=-5, mid will be -4 which is high, so it will keep looping because you cannot reduce high value.
Finding exact value Where the exact value must be find Inclusive version stop at low &amp;gt; high, while exclusive version stop at low == high.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 private int iterativeInclusive(){ int low = 0, high = nums.</description></item></channel></rss>