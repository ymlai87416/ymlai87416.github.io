{"version":3,"sources":["components/ToolList.js","components/Dec2BinTool.js","components/ReverseStr.js","components/MultiLine.js","App.js","serviceWorker.js","index.js"],"names":["ToolList","state","tools","this","setState","title","path","map","tool","i","key","href","style","textAlign","margin","Component","Dec2BinTool","props","dec2BinHelper","debounce","console","log","arr","dec","split","line","trim","filter","length","sameLen","sameLength","result","window","dec2Bin","bin","join","bin2DecHelper","bin2Dec","handleDecChange","e","target","value","handleBinChange","codeUrl","binUrl","wasmModule","WebAssembly","instantiateStreaming","fetch","go","importObject","instance","module","run","className","rows","cols","name","onChange","htmlFor","type","id","checked","flipSameLength","bind","ReverseStr","helper","in","reverse","out","handleChange","MultiLine","multiline","input","language","setLanguage","event","readOnly","App","basename","exact","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.636dca7d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ToolList extends Component {\r\n    state = {\r\n        tools: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        //hard code all the tools here\r\n        var arr = [ \r\n            {\r\n                title: 'Decimal/Binary converter',\r\n                path: '#/dec2bin',\r\n            },\r\n            {\r\n                title: 'Reverse string',\r\n                path: '#/reverseStr',\r\n            },\r\n            {\r\n                title: 'Multiline',\r\n                path: '#/multiline',\r\n            },\r\n         ];\r\n        this.setState({tools: arr})\r\n    }\r\n\r\n    render(){\r\n        const tools = this.state.tools.map((tool, i) => <li key={i}><a href={\"./\"+tool.path}>{tool.title}</a></li>)\r\n        const divStyle = {\r\n            textAlign: 'left',\r\n            margin: '10px'\r\n        }\r\n\r\n        return(\r\n            <div style={divStyle}>\r\n                <h2>All tools</h2> \r\n                <ul>\r\n                   {tools}\r\n                </ul> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ToolList;","import React, {Component} from 'react';\r\nimport { debounce } from \"lodash\";\r\nimport './Dec2BinTool.css';\r\n\r\nclass Dec2BinTool extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dec : \"\",\r\n            bin : \"\",\r\n            sameLength: true\r\n        }\r\n        this.codeUrl = \"https://github.com/ymlai87416/ymlai87416.github.io/blob/master/mytoolproject/tools/dec2bin/main.go\"\r\n        this.binUrl = \"https://ymlai87416.github.io/mytool/bin/dec2bin.wasm\"\r\n        this.wasmModule = null \r\n    }\r\n\r\n    async componentDidMount(){\r\n        let { instance, module } = await WebAssembly.instantiateStreaming(fetch(this.binUrl), window.go.importObject)\r\n        this.wasmModule = module\r\n        await window.go.run(instance)\r\n    }\r\n\r\n    dec2BinHelper = debounce(() => { // this can also dispatch a redux action\r\n        console.log(\"In dec2BinHelper\")\r\n        let arr = this.state.dec.split(/\\r?\\n/).map(line=>line.trim()).filter(line => line.length > 0);\r\n        let sameLen = this.state.sameLength\r\n\r\n        let result = window.dec2Bin(...arr, sameLen)\r\n\r\n        this.setState({bin: result.join(\"\\n\")})\r\n    }, 300);\r\n    \r\n\r\n    bin2DecHelper = debounce(() => { // this can also dispatch a redux action\r\n        console.log(\"In bin2DecHelper\")\r\n        let arr = this.state.bin.split(/\\r?\\n/).map(line=>line.trim()).filter(line => line.length > 0);\r\n        let sameLen = this.state.sameLength\r\n\r\n        let result = window.bin2Dec(...arr, sameLen)\r\n\r\n        this.setState({dec: result.join(\"\\n\")})\r\n    }, 300);\r\n\r\n    \r\n    handleDecChange = (e) => {\r\n        this.setState({dec: e.target.value});\r\n        this.dec2BinHelper()\r\n    }\r\n\r\n    handleBinChange = (e) => {\r\n        this.setState({bin: e.target.value});\r\n        this.bin2DecHelper()\r\n    }\r\n\r\n    flipSameLength(){\r\n        this.setState({sameLength: !this.state.sameLength})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <h1>\r\n                    Decimal/Binary converter\r\n                </h1>\r\n                <p>Convert a list of decimal to binary format, because Excel does not do it...</p>\r\n                <br/>\r\n                <div>\r\n                    Code URL: <a href={this.codeUrl}>{this.codeUrl}</a>\r\n                </div>\r\n                <br/><br/>\r\n                <div className=\"table\">\r\n                    <div className=\"tr\">\r\n                        <span className=\"td\"><h3>Decimal</h3></span>\r\n                        <span className=\"td\"><h3>Binary</h3></span>\r\n                    </div>\r\n                    <div className=\"tr\">\r\n                        <span className=\"td\">\r\n                            <textarea className=\"taInput\" rows = \"10\" cols = \"60\" name = \"decimal\" value={this.state.dec}\r\n                                onChange={this.handleDecChange}/>\r\n                        </span>\r\n                        <span className=\"td\">\r\n                            <textarea className=\"taInput\" rows = \"10\" cols = \"60\" name = \"binary\" value={this.state.bin}\r\n                                onChange={this.handleBinChange}/>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <span>\r\n                    <label htmlFor=\"sameLength\"> Same length in result</label>\r\n                    <input type=\"checkbox\" id=\"sameLength\" checked={this.state.sameLength} onChange={this.flipSameLength.bind(this)}/>\r\n                </span>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Dec2BinTool;","import React, {Component} from 'react';\r\nimport { debounce } from \"lodash\";\r\nimport './ReverseStr.css';\r\n\r\nclass ReverseStr extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dec : \"\",\r\n            bin : \"\",\r\n        }\r\n        this.codeUrl = \"https://github.com/ymlai87416/ymlai87416.github.io/blob/master/mytoolproject/tools/reversestr/main.go\"\r\n        this.binUrl = \"/mytool/bin/reversestr.wasm\"\r\n        this.wasmModule = null \r\n    }\r\n\r\n    async componentDidMount(){\r\n        let { instance, module } = await WebAssembly.instantiateStreaming(fetch(this.binUrl), window.go.importObject)\r\n        this.wasmModule = module\r\n        await window.go.run(instance)\r\n    }\r\n\r\n    helper = debounce(() => { // this can also dispatch a redux action\r\n        console.log(\"In helper\")\r\n        let arr = this.state.in.split(/\\r?\\n/).map(line=>line.trim()).filter(line => line.length > 0);\r\n\r\n        let result = window.reverse(...arr)\r\n\r\n        console.log(result)\r\n\r\n        this.setState({out: result.join(\"\\n\")})\r\n    }, 300);\r\n    \r\n    \r\n    handleChange = (e) => {\r\n        this.setState({in: e.target.value});\r\n        this.helper()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <h1>\r\n                    Reverse string\r\n                </h1>\r\n                <p>Reverse strings</p>\r\n                <br/>\r\n                <div>\r\n                    Code URL: <a href={this.codeUrl}>{this.codeUrl}</a>\r\n                </div>\r\n                <br/><br/>\r\n                <div className=\"table\">\r\n                    <div className=\"tr\">\r\n                        <span className=\"td\"><h3>Input</h3></span>\r\n                        <span className=\"td\"><h3>Output</h3></span>\r\n                    </div>\r\n                    <div className=\"tr\">\r\n                        <span className=\"td\">\r\n                            <textarea className=\"taInput\" rows = \"10\" cols = \"60\" name = \"decimal\" value={this.state.in}\r\n                                onChange={this.handleChange}/>\r\n                        </span>\r\n                        <span className=\"td\">\r\n                            <textarea className=\"taInput\" rows = \"10\" cols = \"60\" name = \"binary\" value={this.state.out} />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ReverseStr;","import React, {Component} from 'react';\r\nimport { debounce } from \"lodash\";\r\nimport './MultiLine.css';\r\n\r\nclass MultiLine extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input : \"\",\r\n            result : \"\",\r\n            language: \"vb\",\r\n        }\r\n        this.codeUrl = \"https://github.com/ymlai87416/ymlai87416.github.io/blob/master/mytoolproject/tools/multiline/main.go\"\r\n        this.binUrl = \"/mytool/bin/multiline.wasm\"\r\n        this.wasmModule = null \r\n    }\r\n\r\n    async componentDidMount(){\r\n        let { instance, module } = await WebAssembly.instantiateStreaming(fetch(this.binUrl), window.go.importObject)\r\n        this.wasmModule = module\r\n        await window.go.run(instance)\r\n    }\r\n\r\n    helper = debounce(() => { // this can also dispatch a redux action\r\n        console.log(\"In helper\")\r\n\r\n        let result = window.multiline(this.state.input, this.state.language)\r\n\r\n        this.setState({result: result})\r\n    }, 300);\r\n\r\n    \r\n    handleChange = (e) => {\r\n        this.setState({input: e.target.value});\r\n        this.helper()\r\n    }\r\n\r\n    setLanguage = (event) => {\r\n        //console.log(event.target.value);\r\n        this.setState({language: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <h1>\r\n                    Multiline code statement to just string\r\n                </h1>\r\n                <p>I hate removing all quote for getting back the SQL</p>\r\n                <br/>\r\n                <div>\r\n                    Code URL: <a href={this.codeUrl}>{this.codeUrl}</a>\r\n                </div>\r\n                <br/><br/>\r\n                <div className=\"table\">\r\n                    <div className=\"tr\">\r\n                        <span className=\"td\"><h3>Input</h3></span>\r\n                        <span className=\"td\"><h3>Result</h3></span>\r\n                    </div>\r\n                    <div className=\"tr\">\r\n                        <span className=\"td\">\r\n                            <textarea className=\"taInput\" rows = \"10\" cols = \"80\" name = \"decimal\" value={this.state.input}\r\n                                onChange={this.handleChange}/>\r\n                        </span>\r\n                        <span className=\"td\">\r\n                            <textarea className=\"taInput\" rows = \"10\" cols = \"80\" name = \"binary\" value={this.state.result} readOnly/>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div >\r\n                    <input type=\"radio\" value=\"vb\" name=\"language\" checked={this.state.language === \"vb\"} onChange={this.setLanguage}/> Visual basic\r\n                    <br/>\r\n                    <input type=\"radio\" value=\"java\" name=\"language\" checked={this.state.language === \"java\"} onChange={this.setLanguage}/> Java\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MultiLine;","import React from 'react';\nimport {\n  HashRouter, Route \n} from \"react-router-dom\";\nimport './App.css';\nimport ToolList from './components/ToolList.js'\nimport Dec2BinTool from './components/Dec2BinTool'\nimport ReverseStr from './components/ReverseStr'\nimport MultiLine from './components/MultiLine'\n\nfunction App() {\n  return (\n\n    <HashRouter basename=\"/mytool\"> \n      <div>\n        <Route exact path=\"/\" component={ToolList} />\n        <Route path=\"/dec2bin\" component={Dec2BinTool} />\n        <Route path=\"/reverseStr\" component={ReverseStr} />\n        <Route path=\"/multiLine\" component={MultiLine} />\n      </div>\n    </HashRouter>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}